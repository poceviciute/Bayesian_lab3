muPost <- wPrior*muPrior + (1-wPrior)*mean(x[alloc == j])
tau2Post <- 1/precPost
mu[j] <- rnorm(1, mean = muPost, sd = sqrt(tau2Post))
}
# Update sigma2's
for (j in 1:nComp){
sigma2[j] <- rScaledInvChi2(1, df = nu0[j] + nAlloc[j], scale = (nu0[j]*sigma2_0[j] + sum((x[alloc == j] - mu[j])^2))/(nu0[j] + nAlloc[j]))
}
# Update allocation
for (i in 1:nObs){
for (j in 1:nComp){
probObsInComp[j] <- pi[j]*dnorm(x[i], mean = mu[j], sd = sqrt(sigma2[j]))
}
S[i,] <- t(rmultinom(1, size = 1 , prob = probObsInComp/sum(probObsInComp)))
}
# Printing the fitted density against data histogram
if (plotFit && (k%%1 ==0)){
effIterCount <- effIterCount + 1
#   hist(x, breaks = 20, freq = FALSE, xlim = c(xGridMin,xGridMax), main = paste("Iteration number",k), ylim = ylim)
mixDens <- rep(0,length(xGrid))
#   components <- c()
for (j in 1:nComp){
compDens <- dnorm(xGrid,mu[j],sd = sqrt(sigma2[j]))
mixDens <- mixDens + pi[j]*compDens
#     lines(xGrid, compDens, type = "l", lwd = 2, col = lineColors[j])
#     components[j] <- paste("Component ",j)
#   }
mixDensMean <- ((effIterCount-1)*mixDensMean + mixDens)/effIterCount
#
#   lines(xGrid, mixDens, type = "l", lty = 2, lwd = 3, col = 'red')
#   legend("topleft", box.lty = 1, legend = c("Data histogram",components, 'Mixture'),
#          col = c("black",lineColors[1:nComp], 'red'), lwd = 2)
#   Sys.sleep(sleepTime)
}
}
}
hist(x, breaks = 20, freq = FALSE, xlim = c(xGridMin,xGridMax), main = "Final fitted density")
lines(xGrid, mixDensMean, type = "l", lwd = 2, lty = 4, col = "red")
lines(xGrid, dnorm(xGrid, mean = post_mu, sd = sqrt(post_sigma2)), type = "l", lwd = 2, col = "blue")
legend("topright", box.lty = 1, legend = c("Data histogram","Mixture density","Normal density from a)"), col=c("black","red","blue"), lwd = 2)
#########################    Helper functions    ##############################################
rawData <- rain
x <- as.matrix(rawData)
# Model options
nComp <- 2    # Number of mixture components
# Prior options
alpha <- 10*rep(1,nComp) # Dirichlet(alpha)
muPrior <- rep(0,nComp) # Prior mean of mu
tau2Prior <- rep(10,nComp) # Prior std of mu
sigma2_0 <- rep(var(x),nComp) # s20 (best guess of sigma2)
nu0 <- rep(4,nComp) # degrees of freedom for prior on sigma2
# MCMC options
nIter <- 1000 # Number of Gibbs sampling draws
# Plotting options
plotFit <- TRUE
# lineColors <- c("blue", "green", "magenta", 'yellow')
# sleepTime <- 0.1 # Adding sleep time between iterations for plotting
################   END USER INPUT ###############
###### Defining a function that simulates from the
rScaledInvChi2 <- function(n, df, scale){
return((df*scale)/rchisq(n,df=df))
}
####### Defining a function that simulates from a Dirichlet distribution
rDirichlet <- function(param){
nCat <- length(param)
piDraws <- matrix(NA,nCat,1)
for (j in 1:nCat){
piDraws[j] <- rgamma(1,param[j],1)
}
piDraws = piDraws/sum(piDraws) # Diving every column of piDraws by the sum of the elements in that column.
return(piDraws)
}
# Simple function that converts between two different representations of the mixture allocation
S2alloc <- function(S){
n <- dim(S)[1]
alloc <- rep(0,n)
for (i in 1:n){
alloc[i] <- which(S[i,] == 1)
}
return(alloc)
}
# Initial value for the MCMC
nObs <- length(x)
S <- t(rmultinom(nObs, size = 1 , prob = rep(1/nComp,nComp))) # nObs-by-nComp matrix with component allocations.
mu <- quantile(x, probs = seq(0,1,length = nComp))
sigma2 <- rep(var(x),nComp)
probObsInComp <- rep(NA, nComp)
# Setting up the plot
xGrid <- seq(min(x)-1*apply(x,2,sd),max(x)+1*apply(x,2,sd),length = 100)
xGridMin <- min(xGrid)
xGridMax <- max(xGrid)
mixDensMean <- rep(0,length(xGrid))
effIterCount <- 0
ylim <- c(0,2*max(hist(x)$density))
for (k in 1:nIter){
#message(paste('Iteration number:',k))
alloc <- S2alloc(S) # Just a function that converts between different representations of the group allocations
nAlloc <- colSums(S)
#print(nAlloc)
# Update components probabilities
pi <- rDirichlet(alpha + nAlloc)
# Update mu's
for (j in 1:nComp){
precPrior <- 1/tau2Prior[j]
precData <- nAlloc[j]/sigma2[j]
precPost <- precPrior + precData
wPrior <- precPrior/precPost
muPost <- wPrior*muPrior + (1-wPrior)*mean(x[alloc == j])
tau2Post <- 1/precPost
mu[j] <- rnorm(1, mean = muPost, sd = sqrt(tau2Post))
}
# Update sigma2's
for (j in 1:nComp){
sigma2[j] <- rScaledInvChi2(1, df = nu0[j] + nAlloc[j], scale = (nu0[j]*sigma2_0[j] + sum((x[alloc == j] - mu[j])^2))/(nu0[j] + nAlloc[j]))
}
# Update allocation
for (i in 1:nObs){
for (j in 1:nComp){
probObsInComp[j] <- pi[j]*dnorm(x[i], mean = mu[j], sd = sqrt(sigma2[j]))
}
S[i,] <- t(rmultinom(1, size = 1 , prob = probObsInComp/sum(probObsInComp)))
}
# Printing the fitted density against data histogram
if (plotFit && (k%%1 ==0)){
effIterCount <- effIterCount + 1
#   hist(x, breaks = 20, freq = FALSE, xlim = c(xGridMin,xGridMax), main = paste("Iteration number",k), ylim = ylim)
mixDens <- rep(0,length(xGrid))
#   components <- c()
for (j in 1:nComp){
compDens <- dnorm(xGrid,mu[j],sd = sqrt(sigma2[j]))
mixDens <- mixDens + pi[j]*compDens
#     lines(xGrid, compDens, type = "l", lwd = 2, col = lineColors[j])
#     components[j] <- paste("Component ",j)
#   }
mixDensMean <- ((effIterCount-1)*mixDensMean + mixDens)/effIterCount
#
#   lines(xGrid, mixDens, type = "l", lty = 2, lwd = 3, col = 'red')
#   legend("topleft", box.lty = 1, legend = c("Data histogram",components, 'Mixture'),
#          col = c("black",lineColors[1:nComp], 'red'), lwd = 2)
#   Sys.sleep(sleepTime)
}
}
}
hist(x, breaks = 20, freq = FALSE, xlim = c(xGridMin,xGridMax), main = "Final fitted density")
lines(xGrid, mixDensMean, type = "l", lwd = 2, lty = 4, col = "red")
lines(xGrid, dnorm(xGrid, mean = post_mu, sd = sqrt(post_sigma2)), type = "l", lwd = 2, col = "blue")
legend("topright", box.lty = 1, legend = c("Data histogram","Mixture density","Normal density from a)"), col=c("black","red","blue"), lwd = 2)
#########################    Helper functions    ##############################################
#Question 2
library(rstan)
ar_process = '
data {
int<lower=0> iter;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
real mu;
}
transformed data {
real x[iter];
x[1] <- mu;
}
parameters {
real epsilon;
}
model {
for(i in 2:iter){
x[i] ~ normal(mu + phi*(x[i-1]-mu), sqrt(sigma2));
}
}'
burnin = 100
niter = 200
fit1<-stan(model_code=ar_process,
data=list(iter=200, sigma2=2, phi=0.5, mu=10),
warmup=burnin,
iter=niter,
chains=1)
#Question 2
library(rstan)
ar_process = '
data {
int<lower=0> iter;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
real mu;
}
transformed data {
real x[iter];
x[1] = mu;
}
parameters {
real epsilon;
}
model {
for(i in 2:iter){
x[i] ~ normal(mu + phi*(x[i-1]-mu), sqrt(sigma2));
}
}'
burnin = 100
niter = 200
fit1<-stan(model_code=ar_process,
data=list(iter=200, sigma2=2, phi=0.5, mu=10),
warmup=burnin,
iter=niter,
chains=1)
ar_process = '
data {
int<lower=0> iter;
}
transformed data {
real x[iter];
x[1] = mu;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
}
model {
for(i in 2:iter){
x[i] ~ normal(mu + phi*(x[i-1]-mu), sqrt(sigma2));
}
}'
burnin = 100
niter = 200
fit1<-stan(model_code=ar_process,
data=list(iter=200),
init = list(sigma2=2, phi=0.5, mu=10)
warmup=burnin,
iter=niter,
chains=1)
ar_process = '
data {
int<lower=0> iter;
}
transformed data {
real x[iter];
x[1] = mu;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
}
model {
for(i in 2:iter){
x[i] ~ normal(mu + phi*(x[i-1]-mu), sqrt(sigma2));
}
}'
burnin = 100
niter = 200
fit1<-stan(model_code=ar_process,
data=list(iter=200),
init = list(sigma2=2, phi=0.5, mu=10),
warmup=burnin,
iter=niter,
chains=1)
ar_process = '
data {
int<lower=0> iter;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
}
transformed parameters {
real x[iter];
x[1] = mu;
}
model {
for(i in 2:iter){
x[i] ~ normal(mu + phi*(x[i-1]-mu), sqrt(sigma2));
}
}'
burnin = 100
niter = 200
fit1<-stan(model_code=ar_process,
data=list(iter=200),
init = list(sigma2=2, phi=0.5, mu=10),
warmup=burnin,
iter=niter,
chains=1)
fit1<-stan(model_code=ar_process,
data=list(iter=200),
init = list(sigma2=list(2), phi=list(0.5), mu=list(10)),
warmup=burnin,
iter=niter,
chains=1)
fit1<-stan(model_code=ar_process,
data=list(iter=200),
init = list(sigma2=2, phi=0.5, mu=10),
warmup=burnin,
iter=niter,
chains=3)
fit1<-stan(model_code=ar_process,
data=list(iter=200),
init = list(sigma2=list(2), phi=list(0.5), mu=list(10)),
warmup=burnin,
iter=niter,
chains=3)
init_para <- list(sigma2=list(2), phi=list(0.5), mu=list(10))
init_para <- list(sigma2=list(2), phi=list(0.5), mu=list(10))
fit1<-stan(model_code=ar_process,
data=list(iter=200),
init = init_para,
warmup=burnin,
iter=niter,
chains=3)
fit1<-stan(model_code=ar_process,
data=list(iter=200),
init = init_para,
warmup=burnin,
iter=niter)
fit1<-stan(model_code=ar_process,
data=list(iter=200),
init = init_para,
warmup=burnin,
iter=niter,
chains = 3)
init_para <- list(sigma2=2, phi=0.5, mu=10)
fit1<-stan(model_code=ar_process,
data=list(iter=200),
init = init_para,
warmup=burnin,
iter=niter,
chains = 1)
init_para <- list(list(sigma2=2, phi=0.5, mu=10))
fit1<-stan(model_code=ar_process,
data=list(iter=200),
init = init_para,
warmup=burnin,
iter=niter,
chains = 1)
ar_process = '
data {
int<lower=0> iter;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
real x[iter];
}
transformed parameters {
x[1] = mu;
}
model {
for(i in 2:iter){
x[i] ~ normal(mu + phi*(x[i-1]-mu), sqrt(sigma2));
}
}'
burnin = 100
niter = 200
init_para <- list(list(sigma2=2, phi=0.5, mu=10))
fit1<-stan(model_code=ar_process,
data=list(iter=200),
init = init_para,
warmup=burnin,
iter=niter,
chains = 1)
ar_process = '
data {
int<lower=0> iter;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
real x[iter];
}
transformed parameters {
real x[iter];
x[1] = mu;
}
model {
for(i in 2:iter){
x[i] ~ normal(mu + phi*(x[i-1]-mu), sqrt(sigma2));
}
}'
burnin = 100
niter = 200
init_para <- list(list(sigma2=2, phi=0.5, mu=10))
fit1<-stan(model_code=ar_process,
data=list(iter=200),
init = init_para,
warmup=burnin,
iter=niter,
chains = 1)
ar_process = '
data {
int<lower=0> iter;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
real x[iter];
}
transformed parameters {
real x[1];
x[1] = mu;
}
model {
for(i in 2:iter){
x[i] ~ normal(mu + phi*(x[i-1]-mu), sqrt(sigma2));
}
}'
burnin = 100
niter = 200
init_para <- list(list(sigma2=2, phi=0.5, mu=10))
fit1<-stan(model_code=ar_process,
data=list(iter=200),
init = init_para,
warmup=burnin,
iter=niter,
chains = 1)
rep(0,niter-1)
ar_process = '
data {
int<lower=0> iter;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
real x[iter];
}
model {
for(i in 2:iter){
x[i] ~ normal(mu + phi*(x[i-1]-mu), sqrt(sigma2));
}
}'
burnin = 100
niter = 200
init_para <- list(list(sigma2=2, phi=0.5, mu=10, x=c(10,rep(0,niter-1))))
fit1<-stan(model_code=ar_process,
data=list(iter=200),
init = init_para,
warmup=burnin,
iter=niter,
chains = 1)
print(fit1)
burnin <- 100
niter <- 200
mu <- 10
init_para <- list(list(sigma2=2, phi=0.5, mu=10, x=c(mu,rep(0,niter-1))))
init_para
fit1<-stan(model_code=ar_process,
data=list(iter=niter),
init = init_para,
warmup=burnin,
iter=niter,
chains = 1)
print(fit1)
c(mu,rep(0,niter-1))
fit1<-stan(model_code=ar_process,
data=list(iter=niter),
init = init_para,
warmup=burnin,
iter=niter,
chains = 1)
print(fit1)
fit1@model_pars
get_posterior_mean(fit1)
get_posterior_mean(fit1)[3:niter]
fit1_postmean <- get_posterior_mean(fit1)[4:niter]
plot(fit1_postmean)
fit1_postmean <- get_posterior_mean(fit1)[5:niter]
plot(fit1_postmean)
plot(fit1_postmean, type="l")
ar_process = '
data {
int<lower=0> iter;
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
}
parameters {
real x[iter];
}
model {
for(i in 2:iter){
x[i] ~ normal(mu + phi*(x[i-1]-mu), sqrt(sigma2));
}
}'
burnin <- 100
niter <- 200
mu <- 10
init_para <- list(list(x=c(mu,rep(0,niter-1))))
#needs to be a list of a list since each chain needs its own list
fit1<-stan(model_code=ar_process,
data=list(iter=niter,sigma2=2, phi=0.5, mu=10),
init = init_para,
warmup=burnin,
iter=niter,
chains = 1)
print(fit1)
fit1_postmean <- get_posterior_mean(fit1)[5:niter]
plot(fit1_postmean, type="l")
fit1_postmean <- get_posterior_mean(fit1)[burnin:niter]
plot(fit1_postmean, type="l")
rnorm(1,mean=10,sqrt(2))
rnorm(1,mean=10,sqrt(2))
rnorm(1,mean=10,sqrt(2))
plot(fit1_postmean, type="l")
axis(1, at=seq(0,(n-burn_in), by=50), labels=seq(burn_in,n, by=50))
plot(fit1_postmean, type="l", xaxt="n")
axis(1, at=seq(0,(n-burn_in), by=50), labels=seq(burn_in,n, by=50))
plot(fit1_postmean, type="l", xaxt="n")
axis(1, at=seq(0,(n-burn_in), by=10), labels=seq(burn_in,n, by=10))
plot(fit1_postmean, type="l", xaxt="n", xlab="Draws", ylab="Posterior mean", main="Posterior mean of AR(1) process")
axis(1, at=seq(0,(n-burn_in), by=10), labels=seq(burn_in,n, by=10))
